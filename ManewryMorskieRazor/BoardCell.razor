@implements IDisposable

@inject BoardService BoardService
@inject UserInterface Ui
@inject BoardTransformService BoardTransform

<td class="board-cell" @onclick="CellClicked">
    <div class="@cellCss">
        @if(pawnOnCell.HasValue)
        {
            <div style="@pawnStyle" class="@PawnCss" title="@(pawnOnCell.Value.Label)">
                @(pawnOnCell.Value.Label)
            </div>
        }
    </div>
</td>

@code 
{
    [Parameter]
    public uint Row { get; set; }

    [Parameter]
    public uint Column { get; set; }

    private CellLocation Location => ((int)Column, (int)Row);

    private Pawn? pawnOnCell;

    private string cellCss = "board-cell-mark";    

    private string pawnStyle = string.Empty;

    public string PawnCss
    {
        get
        {
            if (!pawnOnCell.HasValue)
                return string.Empty;

            string result = $"pawn pawn-" + (pawnOnCell.Value.Color == 0 ? "yellow" : "blue");

            if (pawnOnCell.Value.Label is null)
                result += (pawnOnCell.Value.IsBattery ? "-art" : "-ship");

            return result;
        }
    }

    protected override void OnInitialized()
    {
        BoardService[Location].CellMarked += MarkCell;
        BoardService[Location].PawnChanged += PlacePawn;
        BoardTransform.TransformationChanged += Rotate;
    }

    private void CellClicked()
    {
        Ui.Click(Location);
    }

    private async Task MarkCell(MarkOptions option)
    {
        await InvokeAsync(() =>
        {
            string baseStr = "board-cell-mark ";

            switch(option)
            {
                case MarkOptions.None:
                    cellCss = baseStr;
                    break;
                case MarkOptions.Selectable:
                    cellCss = baseStr + "selectable-color";
                    break;
                case MarkOptions.Selected:
                    cellCss = baseStr + "selected-color";
                    break;
                case MarkOptions.Moveable:
                    cellCss = baseStr + "moveable-color";
                    break;
                case MarkOptions.Attackable:
                    cellCss = baseStr + "attackable-color";
                    break;
                case MarkOptions.Minable:
                    cellCss = baseStr + "mineable-color";
                    break;
                default:
                    cellCss = "board-cell-mark bg-info";
                    break;
            }

            StateHasChanged();
        });
    }

    private async Task PlacePawn(Pawn? pawn)
    {
        await InvokeAsync(() =>
        {
            pawnOnCell = pawn;
            StateHasChanged();
        });
    }

    private async Task Rotate(int zoom, bool horizontal)
    {
        await InvokeAsync(() =>
        {
            if (horizontal)
                pawnStyle = "transform-origin: center; transform: rotate(-90deg)";
            else
                pawnStyle = string.Empty;

            StateHasChanged();
        });
    }

    public void Dispose()
    {
        BoardService[Location].CellMarked -= MarkCell;
        BoardService[Location].PawnChanged -= PlacePawn;
        BoardTransform.TransformationChanged -= Rotate;
    }
}
