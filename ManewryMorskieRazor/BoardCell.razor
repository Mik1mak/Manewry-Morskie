@implements IDisposable

@inject BoardService BoardService
@inject UserInterface Ui
@inject BoardTransformService BoardTransform
@inject BootstrapInterop Bootstrap
@inject DialogService DialogService

<td class="board-cell" @onclick="CellClicked">
    <div class="@firstCellCss" style="@cellStyle">
        <div class="@secondCellCss" @ref="dropdownRef" @attributes="dropdownAtrs"
            data-bs-auto-close="false" data-bs-display="static">    
            <PawnDisplayer location="@Location"/>
        </div>
        <ul class="dropdown-menu dropdown-menu-dark">
            @foreach (var (i, opt) in options.Select((opt, i) => (i, opt)))
            {
                <li @onclick="() => ChooseOption(i)">
                    <a class="dropdown-item" href="javascript:void(0);">
                        @opt
                    </a>
                </li>
            }
        </ul>     
    </div>
</td>

@code 
{
    private ElementReference dropdownRef;

    [Parameter]
    public uint Row { get; init; }

    [Parameter]
    public uint Column { get; init; }

    private CellLocation Location => ((int)Column, (int)Row);

    private string firstCellCss = "board-cell-mark dropend";    

    private string secondCellCss = "board-cell-mark";

    private string cellStyle = string.Empty;

    private string[] options = Array.Empty<string>();

    private Dictionary<string, object> dropdownAtrs => options.Any() ? _dropdownAtrs : emptyAtr;

    private static Dictionary<string, object> _dropdownAtrs = new()
    {
        { "data-bs-toggle", "dropdown" },
    };
    private static Dictionary<string, object> emptyAtr = new();

    protected override void OnInitialized()
    {
        BoardService[Location].CellMarked += MarkCell;
        BoardService[Location].ContextMenuDisplayed += DiplayContextMenu;
        BoardTransform.TransformationChanged += Rotate;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            return;

        if (options.Length != 0)
            await Bootstrap.ShowDropdown(dropdownRef);
        else
            await Bootstrap.HideDropdown(dropdownRef);
    }

    private void CellClicked()
    {
        Ui.Click(Location);
    }

    private async Task MarkCell(MarkOptions option)
    {
        await InvokeAsync(() =>
        {
            string baseStr = "board-cell-mark btn-group dropend ";
            string secondBaseStr = "board-cell-mark ";

            switch(option)
            {
                case MarkOptions.None:
                    secondCellCss = secondBaseStr;
                    firstCellCss = baseStr;
                    break;
                case MarkOptions.Selectable:
                    secondCellCss = secondBaseStr + "selectable-color";
                    break;
                case MarkOptions.Selected:
                    firstCellCss = baseStr + "selected-color";
                    break;
                case MarkOptions.Moveable:
                    secondCellCss = secondBaseStr + "moveable-color";
                    break;
                case MarkOptions.Moved:
                    firstCellCss = baseStr + "moved-color";
                    break;
                case MarkOptions.Attackable:
                    secondCellCss = secondBaseStr + "attackable-color";
                    break;
                case MarkOptions.Attacked:
                    firstCellCss = baseStr + "attacked-color";
                    break;
                case MarkOptions.Minable:
                    secondCellCss = secondBaseStr + "mineable-color";
                    break;
                case MarkOptions.Mined:
                    firstCellCss = baseStr + "mined-color";
                    break;
                default:
                    firstCellCss = baseStr + "bg-info";
                    break;
            }

            StateHasChanged();
        });
    }

    private async Task Rotate(int zoom, bool horizontal)
    {
        await InvokeAsync(() =>
        {
            if (horizontal)
                cellStyle = "transform-origin: center; transform: rotate(-90deg)";
            else
                cellStyle = string.Empty;

            StateHasChanged();
        });
    }

    private async Task DiplayContextMenu(string[] options)
    {
        await InvokeAsync(() =>
        {
            this.options = options;
            StateHasChanged();
        });
    }

    private void ChooseOption(int optionId)
    {
        options = Array.Empty<string>();
        StateHasChanged();
        DialogService.ChooseOption(optionId);
    }

    public void Dispose()
    {
        BoardService[Location].CellMarked -= MarkCell;
        BoardService[Location].ContextMenuDisplayed -= DiplayContextMenu;
        BoardTransform.TransformationChanged -= Rotate;
    }
}
