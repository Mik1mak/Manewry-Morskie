@implements IDisposable

@inject BoardService BoardService
@inject UserInterface ui

<td class="board-cell" @onclick="CellClicked">
    <div class="@CellCss">
        @if(PawnOnCell.HasValue)
        {
            <div class="@(PawnOnCell.Value.PawnCss)" title="@(PawnOnCell.Value.Label)">@(PawnOnCell.Value.Label)</div>
        }
    </div>
</td>

@code 
{
    [Parameter]
    public uint Row { get; set; }

    [Parameter]
    public uint Column { get; set; }

    private CellLocation Location => ((int)Column, (int)Row);

    public Pawn? PawnOnCell { get; private set; }

    public string CellCss { get; private set; } = "board-cell-mark";

    protected override void OnInitialized()
    {
        BoardService[Location].CellMarked += MarkCell;
        BoardService[Location].PawnPlaced += PlacePawn;
    }

    private void CellClicked()
    {
        ui.Click(Location);
    }

    private async Task MarkCell(MarkOptions option)
    {
        await InvokeAsync(() =>
        {
            string baseStr = "board-cell-mark ";

            switch(option)
            {
                case MarkOptions.None:
                    CellCss = baseStr;
                    break;
                case MarkOptions.Selectable:
                    CellCss = baseStr + "selectable-color";
                    break;
                case MarkOptions.Selected:
                    CellCss = baseStr + "selected-color";
                    break;
                case MarkOptions.Moveable:
                    CellCss = baseStr + "moveable-color";
                    break;
                case MarkOptions.Attackable:
                    CellCss = baseStr + "attackable-color";
                    break;
                case MarkOptions.Minable:
                    CellCss = baseStr + "mineable-color";
                    break;
                default:
                    CellCss = "board-cell-mark bg-info";
                    break;
            }

            StateHasChanged();
        });
    }

    private async Task PlacePawn(int playerColor, bool battery, string pawnDescription)
    {
        await InvokeAsync(() =>
        {
            PawnOnCell = new()
            {
                Color = playerColor,
                IsBattery = battery,
                Label = pawnDescription,
            };

            StateHasChanged();
        });
    }

    public void Dispose()
    {
        BoardService[Location].CellMarked -= MarkCell;
        BoardService[Location].PawnPlaced -= PlacePawn;
    }

    public struct Pawn
    {
        public string? Label { get; set; }

        public int Color { get; set; }

        public bool IsBattery { get; set; }

        public string PawnCss
        {
            get
            {
                string result = $"pawn pawn-" + (Color == 0 ? "yellow" : "blue");

                if (Label is null)
                    result += (IsBattery ? "-art" : "-ship");

                return result;
            }
        }
    }
}
