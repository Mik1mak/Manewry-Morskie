@implements IDisposable

@inject BoardService BoardService
@inject UserInterface Ui
@inject BoardTransformService BoardTransform
@inject BootstrapInterop Bootstrap
@inject DialogService DialogService

<td class="board-cell" @onclick="CellClicked">
    <div class="@FirstCellCss" style="@cellStyle">
        <div class="@secondCellCss" @ref="dropdownRef" @attributes="dropdownAtrs">    
            <PawnDisplayer Location="@Location"/>
        </div>
        <ul class="@DropdownCss">
            @foreach (var (i, opt) in options.Select((opt, i) => (i, opt)))
            {
                <li @onclick="async () => await ChooseOption(i)">
                    <a class="dropdown-item" href="javascript:void(0);">
                        @opt
                    </a>
                </li>
            }
        </ul>     
    </div>
</td>

@code 
{
    private ElementReference dropdownRef;

    [Parameter]
    public uint Row { get; init; }

    [Parameter]
    public uint Column { get; init; }

    private CellLocation Location => ((int)Column, (int)Row);

    private string firstCellCss = "board-cell-mark btn-group";
    private string FirstCellCss
    {
        get
        {
            if(horizontal)
            {
               return firstCellCss + " dropend";
            }
            else
            {
                if (Row < 8)
                    return firstCellCss + " dropup";
                else
                    return firstCellCss + " dropdown";
            }
        }
    }
    private string DropdownCss
    {
        get
        {
            string baseStr = "dropdown-menu dropdown-menu-dark ";
            if(horizontal)
            {
                if (Row > 8)
                    return baseStr + " dropdown-menu-end";
                else
                    return baseStr + " dropdown-menu-start";
            }
            else
            {
                if (Column > 5)
                    return baseStr + " dropdown-menu-end";
                else
                    return baseStr + " dropdown-menu-start";
            }
        }
    }

    private string secondCellCss = "board-cell-mark";

    private bool horizontal = false;
    private string cellStyle => horizontal ? "transform-origin: center; transform: rotate(-90deg)" : string.Empty;

    private string[] options = Array.Empty<string>();
    private int lastOptionsLength = 0;

    private Dictionary<string, object> dropdownAtrs => options.Any() ? _dropdownAtrs : emptyAtr;
    private static Dictionary<string, object> _dropdownAtrs = new()
    {
        { "data-bs-toggle", "dropdown" },
        { "data-bs-auto-close", "false" },
        { "data-bs-display", "static" },
    };
    private static Dictionary<string, object> emptyAtr = new();

    protected override void OnInitialized()
    {
        BoardService[Location].CellMarked += MarkCell;
        BoardService[Location].ContextMenuDisplayed += DiplayContextMenu;
        BoardTransform.TransformationChanged += Rotate;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (options.Length == lastOptionsLength)
            return;

        if (options.Length != 0)
            await Bootstrap.ShowDropdown(dropdownRef);

        lastOptionsLength = options.Length;
    }

    private void CellClicked()
    {
        Ui.Click(Location);
    }

    private async Task MarkCell(MarkOptions option)
    {
        await InvokeAsync(() =>
        {
            string baseStr = "board-cell-mark btn-group ";
            string secondBaseStr = "board-cell-mark ";

            switch(option)
            {
                case MarkOptions.None:
                    secondCellCss = secondBaseStr;
                    firstCellCss = baseStr;
                    break;
                case MarkOptions.Selectable:
                    secondCellCss = secondBaseStr + "selectable-color";
                    break;
                case MarkOptions.Selected:
                    firstCellCss = baseStr + "selected-color";
                    break;
                case MarkOptions.Moveable:
                    secondCellCss = secondBaseStr + "moveable-color";
                    break;
                case MarkOptions.Moved:
                    firstCellCss = baseStr + "moved-color";
                    break;
                case MarkOptions.Attackable:
                    secondCellCss = secondBaseStr + "attackable-color";
                    break;
                case MarkOptions.Attacked:
                    firstCellCss = baseStr + "attacked-color";
                    break;
                case MarkOptions.Minable:
                    secondCellCss = secondBaseStr + "mineable-color";
                    break;
                case MarkOptions.Mined:
                    firstCellCss = baseStr + "mined-color";
                    break;
                default:
                    firstCellCss = baseStr + "bg-info";
                    break;
            }

            StateHasChanged();
        });
    }

    private async Task Rotate(int zoom, bool horizontal)
    {
        await InvokeAsync(() =>
        {
            this.horizontal = horizontal;
            StateHasChanged();
        });
    }

    private async Task DiplayContextMenu(string[] options)
    {
        await InvokeAsync(async () =>
        {
            this.options = options;
            StateHasChanged();

            if(!options.Any())
                await Bootstrap.HideDropdown(dropdownRef);
        });
    }

    private async ValueTask ChooseOption(int optionId)
    {
        await Bootstrap.HideDropdown(dropdownRef);
        DialogService.ChooseOption(optionId);
        options = Array.Empty<string>();
        StateHasChanged();
    }

    public void Dispose()
    {
        BoardService[Location].CellMarked -= MarkCell;
        BoardService[Location].ContextMenuDisplayed -= DiplayContextMenu;
        BoardTransform.TransformationChanged -= Rotate;
    }
}
