@using System.Globalization
@implements IDisposable

@inject DialogService Dialogs
@inject BoardTransformService BoardTransform
@inject DialogService DialogService

@if(splashScreen.HasValue)
{
    <div class="splash-screen position-relative" style="@SplashStyle" @onclick="HideSplashScreen">
        <div class="position-absolute top-50 start-50 translate-middle">
            <h2>@splashScreen.Value.Message</h2>
        </div>
    </div>    
}
<div class="@MainClass">
    <div class="d-flex h-100 flex-column">
        <ManewryMorskieToolBar />
        <ManewryMorskieDialogs />
        <div id="game-bg" class="w-100 flex-grow-1 text-light overflow-auto">
            <div id="board" style="@boardStyle">
                <table>
                    @for (uint i = 1; i <= HEIGHT; i++)
                    {
                        uint row = HEIGHT - i;

                        <tr class="board-row">
                            @for (uint j = 0; j < WIDTH; j++)
                            {
                                uint column = j;

                                <BoardCell Row="row" Column="column" />
                            }
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>
</div>
@code
{
    public const int WIDTH = 12;
    public const int HEIGHT = 18;

    private string boardStyle = string.Empty;

    private SplashScreen? splashScreen;
    private string MainClass => splashScreen.HasValue ? "d-none" : "overflow-hidden";
    private string SplashStyle => splashScreen.HasValue && splashScreen.Value.IsDismisableByUser ? "cursor: pointer;" : string.Empty;

    protected override void OnInitialized()
    {
        BoardTransform.TransformationChanged += ApplyTransformations;
        DialogService.SplashScreenDisplayed += DisplayPausePlate;
    }

    private async Task ApplyTransformations(int zoom, bool horizontal)
    {
        await InvokeAsync(() =>
        {
            boardStyle = $"transform-origin: top center; transform: scale({(zoom/100f).ToString(CultureInfo.InvariantCulture)})";

            if (horizontal)
                boardStyle += " rotate(90deg) translate(50%, -50%)";

            boardStyle += ";";

            StateHasChanged();
        });
    }

    private async Task DisplayPausePlate(SplashScreen? splashScreen)
    {
        await InvokeAsync(() =>
        {
            this.splashScreen = splashScreen;
            StateHasChanged();
        });
    }

    private void HideSplashScreen()
    {
        if (splashScreen!.Value.IsDismisableByUser)
            splashScreen = null;
        StateHasChanged();
    }

    public void Dispose()
    {
        BoardTransform.TransformationChanged -= ApplyTransformations;
        DialogService.SplashScreenDisplayed += DisplayPausePlate;
    }
}
