@using System.Globalization

@implements IDisposable

@inject DialogService Dialogs
@inject BoardTransformService BoardTransform
@inject DialogService DialogService
@inject DragToScrollService DtS
@inject IConfiguration Config

@if(splashScreen.HasValue)
{
    <div class="splash-screen position-relative" style="@SplashStyle" @onclick="async () => await HideSplashScreen()">
        <div class="position-absolute top-50 start-50 translate-middle">
            <h2>@splashScreen.Value.Message</h2>
        </div>
    </div>    
}
<div class="@MainClass">
        <ManewryMorskieToolBar />
        <ManewryMorskieDialogs />
        <div @ref="gameContainer" id="game-bg" class="w-100 flex-grow-1 text-light overflow-auto">
            <div id="board" style="@boardStyle">
                <table>
                    @for (uint i = 1; i <= HEIGHT; i++)
                    {
                        uint row = HEIGHT - i;

                        <tr class="board-row">
                            @for (uint j = 0; j < WIDTH; j++)
                            {
                                uint column = j;

                                <BoardCell Row="row" Column="column" />
                            }
                        </tr>
                    }
                </table>
            </div>
        </div>
</div>
@code
{
    public const int WIDTH = 12;
    public const int HEIGHT = 18;

    private IFormatProvider fp = CultureInfo.InvariantCulture;
    private ElementReference gameContainer;

    private string boardStyle = string.Empty;
    private bool boardCentring = true;

    private SplashScreen? splashScreen;
    private string MainClass => splashScreen.HasValue ? "d-none" : "d-flex h-100 flex-column overflow-hidden";
    private string SplashStyle => splashScreen.HasValue && splashScreen.Value.IsDismisableByUser ? "cursor: pointer;" : string.Empty;

    protected override void OnInitialized()
    {
        BoardTransform.TransformationChanged += ApplyTransformations;
        DialogService.SplashScreenDisplayed += SetSplashScreen;
        boardCentring = bool.Parse(Config["BoardCentering"]);
        if(!boardCentring)
            boardStyle = "margin-left:0;margin-right:0;";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
            await DtS.RegisterEvent(gameContainer);
    }

    private async Task ApplyTransformations(int zoom, bool horizontal)
    {
        await InvokeAsync(() =>
        {
            boardStyle = $"transform-origin: top {(horizontal || !boardCentring ? "left" : "center")}; transform: scale({(zoom / 100f).ToString(fp)})";

            if (horizontal)
                boardStyle += " rotate(90deg) translateY(-100%);";
            else
                boardStyle += ";";

            if (horizontal || !boardCentring)
                boardStyle += "margin-left:0;margin-right:0;";

            StateHasChanged();
        });
    }

    private async Task SetSplashScreen(SplashScreen? splashScreen)
    {
        await InvokeAsync(() =>
        {
            this.splashScreen = splashScreen;
            StateHasChanged();
        });
    }

    private async ValueTask HideSplashScreen()
    {
        if (splashScreen!.Value.IsDismisableByUser)
        {
            splashScreen = null;
            StateHasChanged();
            await DialogService.DismissSplashScreen();
        }
    }

    public void Dispose()
    {
        BoardTransform.TransformationChanged -= ApplyTransformations;
        DialogService.SplashScreenDisplayed += SetSplashScreen;
    }
}
