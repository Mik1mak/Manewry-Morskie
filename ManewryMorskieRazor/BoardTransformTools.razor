@inject BoardTransformService BoardTransform

<li class="nav-item dropdown">
    <button type="button" class="btn-outline-light btn mx-2"
            @onclick="async () => await BoardTransform.Rotate(!BoardTransform.Horizontal)">
        <span class="oi oi-loop-circular"></span>
        <span class="d-none d-lg-inline">  Obróć</span>
    </button>
</li>
<li class="nav-item dropdown">
    <div class="btn-group mx-2">
        <button type="button" class="btn btn-outline-light @(CannotZoomOut?"disabled":string.Empty)"
                @onclick="async () => await ChangeZoom(-15)">
            <span class="oi oi-zoom-out"></span>
            <span class="d-none d-lg-inline"> Oddal</span>
        </button>
        <button type="button" class="btn btn-outline-light d-none d-sm-block" style="width:67px;"
                @onclick="async () => await ChangeZoom(DEFAULT_ZOOM-Zoom)">
            @Zoom%
        </button>
        <button type="button" class="btn btn-outline-light @(CannotZoomIn?"disabled":string.Empty)"
                @onclick="async () => await ChangeZoom(15)">
            <span class="oi oi-zoom-in"></span>
            <span class="d-none d-lg-inline"> Przybliż</span>
        </button>
    </div>
</li>

@code 
{
    private const int MAX_ZOOM = 190;
    private const int MIN_ZOOM = 40;
    private const int DEFAULT_ZOOM = 100;

    public int Zoom { get; private set; } = DEFAULT_ZOOM;

    private bool CannotZoomOut => Zoom == MIN_ZOOM;
    private bool CannotZoomIn => Zoom == MAX_ZOOM;

    private async ValueTask ChangeZoom(int step)
    {
        if (Zoom + step <= MAX_ZOOM && Zoom + step >= MIN_ZOOM)
        {
            Zoom += step;
            await BoardTransform.Zoom(Zoom);
        }
    }
}
