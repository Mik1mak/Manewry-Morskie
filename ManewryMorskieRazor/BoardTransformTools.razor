@inject BoardTransformService BoardTransform

<BSNavItem IsDropdown="true">
    <BSButton IsOutlined="true" Color="BSColor.Light" MarginLeftAndRight="Margins.Small"
              @onclick="async () => await BoardTransform.Rotate(!BoardTransform.Horizontal)">
        <span class="oi oi-loop-circular"></span>
        <span class="d-none d-lg-inline">  Obróć</span>
    </BSButton>
</BSNavItem>
<BSNavItem IsDropdown="true">
    <BSButtonGroup MarginLeftAndRight="Margins.Small">
        <BSButton Color="BSColor.Light" IsOutlined="true" @onclick="async () => await ChangeZoom(-15)" IsDisabled="@CannotZoomOut">
            <span class="oi oi-zoom-out"></span>
            <span class="d-none d-lg-inline"> Oddal</span>
        </BSButton>
        <BSButton Color="BSColor.Light" Class="d-none d-sm-block"
                  IsOutlined="true" @onclick="async () => await ChangeZoom(DEFAULT_ZOOM-Zoom)">
            @Zoom%
        </BSButton>
        <BSButton Color="BSColor.Light" IsOutlined="true" @onclick="async () => await ChangeZoom(15)" IsDisabled="@CannotZoomIn">
            <span class="oi oi-zoom-in"></span>
            <span class="d-none d-lg-inline"> Przybliż</span>
        </BSButton>
    </BSButtonGroup>
</BSNavItem>

@code 
{
    private const int MAX_ZOOM = 190;
    private const int MIN_ZOOM = 40;
    private const int DEFAULT_ZOOM = 100;

    public int Zoom { get; private set; } = DEFAULT_ZOOM;

    private bool CannotZoomOut => Zoom == MIN_ZOOM;
    private bool CannotZoomIn => Zoom == MAX_ZOOM;

    private async ValueTask ChangeZoom(int step)
    {
        if (Zoom + step <= MAX_ZOOM && Zoom + step >= MIN_ZOOM)
        {
            Zoom += step;
            await BoardTransform.Zoom(Zoom);
        }
    }
}
