@using Microsoft.Extensions.Configuration

@implements IDisposable

@inject BoardService BoardService
@inject IConfiguration config

@if(pawn.HasValue)
{
    <div class="@PawnCss" title="@(pawn.Value.LabelIsHidden ? string.Empty : pawn.Value.Label)">
        @if(!pawn.Value.LabelIsHidden)
        {
            <div class="pawn-label" style="transform: scale(@(scale.ToString().Replace(',', '.'))">@(pawn.Value.Label)</div>
        }
    </div>
}

@code {
    [Parameter]
    public CellLocation Location { get; set; }

    private string scale = "1";
    private Pawn? pawn;

    private string PawnCss
    {
        get
        {
            string result = $"pawn pawn-" + (pawn!.Value.Color == 0 ? "yellow" : "blue");

            if (pawn.Value.LabelIsHidden)
                result += (pawn.Value.IsBattery ? "-art" : "-ship");

            return result;
        }
    }

    protected override void OnInitialized()
    {
        scale = config["PawnFontScale"];
        BoardService[Location].PawnChanged += PlacePawn;
    }

    private async Task PlacePawn(Pawn? pawn)
    {
        await InvokeAsync(() =>
        {
            this.pawn = pawn;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        BoardService[Location].PawnChanged -= PlacePawn;
    }
}
